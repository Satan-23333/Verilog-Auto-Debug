Here's the corrected Verilog code:

```verilog
module div_16bit (
    input wire [15:0] A,
    input wire [7:0] B,
    output reg [15:0] result,
    output reg [15:0] odd
    );
    
    reg [16:0] a_reg;
    integer i;

    always@(*) begin
        a_reg = {1'b0, A};
        result = 16'b0;
        odd = 16'b0;

        for(i = 0; i < 16; i = i+1) begin
            a_reg = a_reg << 1;
            if (a_reg[16:9] >= B) begin
                a_reg[16:9] = a_reg[16:9] - B;
                result = result << 1 | 1'b1;
            end
            else begin
                result = result << 1;
            end
        end
        odd = a_reg[15:0];
    end
endmodule
```

In the initial code, the comprehension of the division operation was incorrect. The division operation was carried out on the 8 MSB bits of the 16-bit dividend with the 8-bit divisor. But the operation must be carried out on the entire 16-bit dividend. Therefore, the dividend is put into a 16-bit register and an additional bit is added to the left for the shift operation. The divisor is directly used in the comparison operation. The temporary variables tmp_a and tmp_b, and the "b_reg" register are not needed and thus have been removed from the code. The operation of shifting, comparing, subtracting, and updating the result and remainder is carried out in the `always@(*)` block.
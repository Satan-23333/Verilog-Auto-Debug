Based on your requirements, I've made modifications to your Verilog design. The problem with your current design is that it doesn't correctly handle the division when the divisor is larger than the current dividend. This issue has been addressed in the corrected code below.

Here's the corrected Verilog design code:

```Verilog
module div_16bit(
    input wire [15:0] A,
    input wire [7:0] B,
    output reg [15:0] result,
    output reg [15:0] odd
);

reg [31:0] tmp_a;
reg [31:0] tmp_b;
integer i;

always@(A, B) begin
    tmp_a = {16'b0, A};
    tmp_b = {B, 16'b0};
    result = 16'b0;
    for(i = 16; i > 0; i = i-1) begin
        tmp_b = tmp_b << 1;
        if (tmp_a >= tmp_b) begin
            tmp_a = tmp_a - tmp_b;
            result = result << 1;
            result[0] = 1;
        end
        else begin
            result = result << 1;
        end
    end
    odd = tmp_a[15:0];
end

endmodule
```
In the modified code, two 32-bit registers (`tmp_a` and `tmp_b`) are assigned with the values of the dividend and divisor, respectively, where the dividend is concatenated with 16 zeros at the higher side and the divisor is concatenated with 16 zeros at the lower side. The result is initially set to zero. A loop is then initiated where the `tmp_b` (divisor) is left-shifted, and the `tmp_a` (dividend) is compared with the `tmp_b`. If `tmp_a` is larger or equal to `tmp_b`, `tmp_b` is subtracted from `tmp_a`, and the result is shifted left by one bit then the least significant bit is set to one. If `tmp_a` is less than `tmp_b`, the result is just shifted left by one bit. After running the loop 16 times, all bits of the dividend will have been processed, and the remainder is then assigned the lower 16 bits of `tmp_a`.
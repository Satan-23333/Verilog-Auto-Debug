Sure, here is the corrected verilog design code for the 16-bit divider module:

```verilog
module div_16bit(
    input wire [15:0] A,
    input wire [7:0] B,
    output wire [15:0] result,
    output wire [15:0] odd
    );

reg [15:0] a_reg;
reg [15:0] b_reg;
reg [31:0] tmp_a;
reg [31:0] tmp_b;
integer i;

always@(*) begin
    a_reg = A;
    b_reg = B;
end

always@(*) begin
    begin
        tmp_a = {16'b0, a_reg};
        tmp_b = {b_reg, 16'b0};
        for(i = 15;i >= 0;i = i-1) begin
            if (tmp_a >= tmp_b) begin
                tmp_a = tmp_a - tmp_b;
                result[i] = 1'b1;
            end
            else begin
                result[i] = 1'b0;
            end
            tmp_a = tmp_a << 1;
        end
    end
end

assign odd = tmp_a[31:16];

endmodule
```
The corrected code now properly implements the division operation. The loop in the second always block now iterates from the most significant bit to the least significant bit of the dividend (a_reg). If the current value of tmp_a is greater than or equal to tmp_b, then tmp_a is updated by subtracting tmp_b from it, and the corresponding bit of the quotient (result) is set to 1. Otherwise, the corresponding bit of the quotient is set to 0. After each iteration, tmp_a is left-shifted by one bit to prepare for the next iteration. The remainder after the division operation is assigned to the output port odd.
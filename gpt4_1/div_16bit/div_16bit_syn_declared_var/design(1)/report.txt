Here is the corrected Verilog design code for the 16-bit divider module:

```verilog
module div_16bit(
    input [15:0] A,
    input [7:0] B,
    output reg [15:0] result,
    output reg [15:0] odd
);

reg [15:0] a_reg;
reg [7:0] b_reg;
reg [23:0] tmp_a;
reg [15:0] tmp_b;
integer i;

always @(A, B) begin
    a_reg = A;
    b_reg = B;
end

always @(a_reg, b_reg) begin
    tmp_a = {8'b0, a_reg};
    tmp_b = {8'b0, b_reg};
    for(i=0; i<16; i=i+1) begin
        tmp_a = tmp_a << 1;
        if (tmp_a[23:8] >= tmp_b) begin
            tmp_a[23:8] = tmp_a[23:8] - tmp_b;
            tmp_a[7] = 1;
        end
    end
    result = tmp_a[15:0];
    odd = tmp_a[23:8];
end

endmodule
```

The main changes are the following:
1. Changed the size of tmp_a to 24 bits to hold the shifted dividend and the 1 bit quotient.
2. Changed the size of tmp_b to 16 bits to match the size of tmp_a[23:8], where the comparison and subtraction are performed.
3. Added a line to set tmp_a[7] to 1 when tmp_a[23:8] is greater or equal to tmp_b. This is the bit of the quotient.
4. The result (quotient) and odd (remainder) are updated in the second always block.
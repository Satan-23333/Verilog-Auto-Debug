Here is the corrected Verilog design code:

```verilog
module div_16bit(
    input [15:0] A,
    input [7:0] B,
    output reg [15:0] result,
    output reg [15:0] odd
);
    reg [15:0] a_reg;
    reg [7:0] b_reg;
    integer i;

    always @(*) begin
        a_reg = A;
        b_reg = B;
        result = 16'b0;
        odd = a_reg;

        for(i=15; i>=0; i=i-1) begin
            if (odd[15:8] >= b_reg) begin
                odd[15:8] = odd[15:8] - b_reg;
                result = (result << 1) | 1'b1;
            end else
                result = result << 1;

            if(i > 0)
                odd = {odd[14:0], a_reg[i]};
        end
    end
endmodule
```
The issue with the initial design was with the updating of the `odd` register in the last line of the loop inside the always block. It was updating `odd` with the `(i-1)`th bit of `a_reg` instead of the `i`th bit of `a_reg`. This was causing an off-by-one error that resulted in an incorrect calculation.

By changing the index from `i-1` to `i`, the corrected design now ensures that the correct bit from `a_reg` is concatenated to `odd` at each iteration of the loop.
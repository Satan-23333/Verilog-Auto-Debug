Here is the corrected Verilog design code:

```verilog
module	multi_pipe_8bit(
    input wire clk,
    input wire rst_n,
    input wire [7:0] mul_a,
    input wire [7:0] mul_b,
    input wire mul_en_in,
    output reg mul_en_out,
    output reg [15:0] mul_out
);

    reg [2:0] mul_en_out_reg;
    reg [7:0] mul_a_reg;
    reg [7:0] mul_b_reg;
    wire [15:0] temp [7:0];
    reg [15:0] sum [7:0];
    reg [15:0] mul_out_reg;

    always @(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            mul_en_out_reg <= 3'b0;
            mul_en_out     <= 1'b0;
            mul_a_reg <= 8'b0;
            mul_b_reg <= 8'b0;
            mul_out_reg <= 16'b0;
            mul_out <= 16'b0;
            for (integer i=0; i<8; i=i+1)
                sum[i] <= 16'b0;
        end else begin
            mul_en_out_reg <= {mul_en_out_reg[1:0],mul_en_in};
            mul_en_out     <= mul_en_out_reg[2];
            if(mul_en_in) begin
                mul_a_reg <= mul_a;
                mul_b_reg <= mul_b;
            end
        end
    end

    genvar i;
    generate
        for (i = 0; i < 8; i=i+1) begin : partial_product_gen
            assign temp[i] = mul_b_reg[i] ? ({8{mul_a_reg}} << i) : {16{1'b0}};
        end
    endgenerate

    always @(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            for (integer i=0; i<8; i=i+1)
                sum[i] <= 16'b0;
        end else begin
            for (integer i=0; i<8; i=i+1)
                sum[i] <= temp[i];
            mul_out_reg <= sum[0] + sum[1] + sum[2] + sum[3] + sum[4] + sum[5] + sum[6] + sum[7];
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if(!rst_n)
            mul_out <= 16'b0;
        else if(mul_en_out)
            mul_out <= mul_out_reg;
        else
            mul_out <= 16'b0;
    end

endmodule
```

This design has fixed the errors in the original design code. It correctly declares the size of variables, uses the correct number of bits in shift operations and assignments, and correctly uses for loops in always blocks. Please try to compile this design code and let me know if there are any other issues.
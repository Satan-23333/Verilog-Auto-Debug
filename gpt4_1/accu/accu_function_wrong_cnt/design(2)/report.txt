Here is the corrected design code:

```verilog
module	accu(
    input               clk         ,   
    input               rst_n       ,
    input       [7:0]   data_in     ,
    input               valid_in     ,
 
    output  reg         valid_out     ,
    output  reg [9:0]   data_out
);
    
   reg [2:0] count;  // Increase count size to store 4 data points
   reg [9:0]   data_out_reg;

   //count
   always @(posedge clk or negedge rst_n) begin
       if(!rst_n) begin
          count <= 3'b000;
          valid_out <= 1'b0; 
          data_out_reg <= 10'b0;
       end
       else if(valid_in) begin
          count <= count + 1;
          data_out_reg <= data_out_reg + data_in;
          if (count == 3'b100) begin  // count up to 4
            valid_out <= 1'b1;
            data_out <= data_out_reg;
            count <= 3'b000;
            data_out_reg <= 10'b0;
          end
          else begin
            valid_out <= 1'b0;
          end
       end
   end
endmodule
```

The main issue with the original design was that the count variable was only 2 bits, which means it can only count up to 3 (2'b11). This caused the accumulation to output the sum after three inputs instead of four. 

In the corrected design, the size of the count variable is increased to 3 bits (allowing it to count up to 4) and the condition to output the sum is changed to check for count == 3'b100 (4 in binary).
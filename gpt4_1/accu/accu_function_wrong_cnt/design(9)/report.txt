The error in your design is due to a race condition between `count` and `data_out_reg`. The `count` is being incremented and checked in the same cycle, which means that the final increment (to `2'b11`) isn't registered before the check (if `count == 2'b11`). To avoid this problem, the increment of `count` needs to be moved after the check. 

Here is your corrected design:

```verilog
module	accu(
    input               clk         ,   
    input               rst_n       ,
    input       [7:0]   data_in     ,
    input               valid_in     ,

    output  reg         valid_out     ,
    output  reg [9:0]   data_out
);

    reg [1:0] count;
    reg [9:0]   data_out_reg;
    
    always @(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            count <= 2'b00;
            valid_out <= 1'b0; 
            data_out_reg <= 10'b0;
        end
        else if(valid_in) begin
            data_out_reg <= data_out_reg + data_in;
            if (count == 2'b11) begin
                data_out <= data_out_reg;
                valid_out <= 1'b1;
                count <= 2'b00;
                data_out_reg <= 10'b0;
            end
            else begin
                count <= count + 1;
                valid_out <= 1'b0;
            end
        end
    end
endmodule
```

In the corrected code, incrementing `count` and resetting `valid_out` happens after the check for `count == 2'b11`, which ensures that `count` reaches `2'b11` and the sum of the four inputs is outputted before `count` and `data_out_reg` are reset.
Sure, here is the corrected Verilog design code.

```verilog
module	accu(
    input               clk         ,   
    input               rst_n       ,
    input       [7:0]   data_in     ,
    input               valid_in     ,
 
    output  reg         valid_out     ,
    output  reg [9:0]   data_out
);
    
   reg [1:0] count;
   reg [9:0]   data_out_reg;

   //count
   always @(posedge clk or negedge rst_n) begin
       if(!rst_n) begin
          count <= 2'b00;
          valid_out <= 1'b0; 
          data_out_reg <= 10'b0;
       end
       else if(valid_in) begin
          data_out_reg <= data_out_reg + data_in;
          if (count == 2'b11) begin
            valid_out <= 1'b1;
            data_out <= data_out_reg;
            count <= 2'b00;
            data_out_reg <= 10'b0;
          end
          else begin
            valid_out <= 1'b0;
            count <= count + 1;
          end
       end
   end
endmodule
```
The issue with the original Verilog design was that the count was incremented before checking if it was equal to 2'b11. This means that count was actually incremented to 2'b00 before checking if it was equal to 2'b11, which is why the accumulation of the 4 input data was not correct. The corrected design ensures that the count is incremented after checking if it is equal to 2'b11, allowing the correct accumulation of the 4 input data.
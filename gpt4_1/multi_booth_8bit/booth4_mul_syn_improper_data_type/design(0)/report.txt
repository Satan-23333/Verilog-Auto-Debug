Sure, the errors are due to the inappropriate declaration of the variables. The variables should be declared as 'reg' type instead of 'wire' type, since the 'reg' type is used for variables that change their state in always blocks. Here is the corrected Verilog design code:

```verilog
`timescale 1ns / 1ps

module multi_booth_8bit (
    input clk, reset,
    input [7:0] a, b,
    output reg [15:0] p,
    output reg rdy
    );
   
   reg [15:0] multiplier;
   reg [15:0] multiplicand;
   reg [4:0] ctr;
   
   always @(posedge clk or posedge reset) begin
      if (reset) 
      begin
        rdy <= 0;
        p <= 0;
        ctr <= 0;
        multiplier <= {8{a[7]}, a};
        multiplicand <= {8{b[7]}, b};
      end 
      else 
      begin 
        if(ctr < 16) 
        begin
          multiplicand <= multiplicand << 1;
          if (multiplier[ctr] == 1)
          begin
            p <= p + multiplicand;
          end
          ctr <= ctr + 1;
        end
        else 
        begin
          rdy <= 1;
        end
      end
   end
endmodule
```
In this code, the variables 'p', 'rdy', 'multiplier', 'multiplicand', 'ctr' are now declared as 'reg' type, which allows them to store state and be used in always blocks.
Here is the corrected Verilog design code:

```verilog
module multi_booth_8bit (
    input wire clk,
    input wire reset,
    input wire [7:0] a,
    input wire [7:0] b,
    output reg [15:0] p,
    output reg rdy
);
    reg [15:0] multiplier;
    reg [15:0] multiplicand;
    reg [4:0] ctr;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            rdy <= 0;
            p <= 0;
            ctr <= 0;
            multiplier <= {a[7], a, 8'b0};
            multiplicand <= {b[7], b, 8'b0};
        end 
        else begin 
            if(ctr < 16) begin
                p = p + (multiplier[0] ? multiplicand : 16'h0);
                multiplier = {multiplier[15:1], multiplier[15]};
                multiplicand = multiplicand << 1;
                ctr = ctr + 1;
            end
            else begin
                rdy <= 1;
            end
        end
    end
endmodule
```
Changes in the code:

1. The output ports `p` and `rdy` have been declared as `reg` instead of `wire` because they are assigned values inside an `always` block.

2. The syntax to replicate the sign and concatenate the 8-bit inputs `a` and `b` to form 16-bit `multiplier` and `multiplicand` was incorrect. It has been corrected to `{a[7], a, 8'b0}` and `{b[7], b, 8'b0}`. This replicates the sign bit, concatenates with `a` or `b` and appends 8'b0 to form a 16 bit number. 

3. The variable `product` was removed and `p` is used directly to store the product. This is more efficient and avoids redundant variables in the design. 

With these changes, the code should now compile and function as intended.
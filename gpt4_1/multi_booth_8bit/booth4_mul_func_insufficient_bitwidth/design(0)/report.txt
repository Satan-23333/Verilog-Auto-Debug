Here is the corrected Verilog design code:

```verilog
`timescale 1ns / 1ps

module multi_booth_8bit (p, rdy, clk, reset, a, b);
   input clk, reset;
   input [7:0] a, b;
   output reg [15:0] p;
   output reg rdy;
   
   reg [15:0] multiplier;
   reg [15:0] multiplicand;
   reg [4:0] ctr;

always @(posedge clk or posedge reset) begin
    if (reset) 
    begin
    rdy     <= 0;
    p       <= 0;
    ctr     <= 0;
    multiplier <= {a, 8'b0};
    multiplicand <= {b, 8'b0};
    end 
    else 
    begin 
      if(ctr < 16) 
          begin
          multiplicand <= multiplicand << 1;
            if (multiplier[ctr] == 1)
            begin
                p <= p + multiplicand;
            end
            ctr <= ctr + 1;
          end
       else 
           begin
           rdy <= 1;
           end
    end
  end //End of always block
    
endmodule
```
In this code, the multiplicand and the multiplier are first extended from 8 bits to 16 bits. This is necessary because the product of two 8-bit numbers can be a 16-bit number. The counter is also changed from 4 bits to 5 bits since it needs to count up to 16. The ready signal `rdy` is set to 1 when the counter `ctr` reaches 16, indicating that the multiplication process is complete.
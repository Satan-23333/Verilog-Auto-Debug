Based on the given description and the provided design, the multiplier and multiplicand need to be sign extended, and the multiplication process should continue until the counter is less than 16. Here is the corrected Verilog design code:

```verilog
module multi_booth_8bit (p, rdy, clk, reset, a, b);
    input clk, reset;
    input [7:0] a, b;
    output reg [15:0] p;
    output reg rdy;
   
    reg [15:0] multiplier;
    reg [15:0] multiplicand;
    reg [4:0] ctr;

always @(posedge clk or posedge reset) begin
    if (reset) 
    begin
        rdy     <= 0;
        p       <= 16'b0;
        ctr     <= 5'b0;
        multiplier <= {8{a[7]}, a}; // sign extension for multiplier
        multiplicand <= {8{b[7]}, b}; // sign extension for multiplicand
    end 
    else 
    begin 
        if(ctr < 16) 
        begin
           multiplicand <= multiplicand << 1;
           if (multiplier[ctr] == 1'b1)
           begin
               p <= p + multiplicand;
           end
           ctr <= ctr + 1'b1;
        end
        else 
        begin
            rdy <= 1'b1;
        end
    end
end //End of always block
    
endmodule
```

The sign extension for the multiplier and multiplicand is done by repeating the most significant bit (a[7] for a, b[7] for b) eight times. The counter (ctr) is incremented by 1 instead of 1'b1 to prevent it from being treated as a 32-bit value. The ready signal (rdy) is set to 1 using 1'b1 to ensure it is treated as a single bit. The product (p) is initialized to 16'b0 to ensure it is treated as a 16-bit value.
Here is the corrected Verilog design code for the 8-bit Radix-4 Booth multiplier.

```verilog
module multi_booth_8bit (p, rdy, clk, reset, a, b);
   input clk, reset;
   input [7:0] a, b;
   output reg [15:0] p;
   output reg rdy;
   
   reg [15:0] multiplier;
   reg [15:0] multiplicand;
   reg [4:0] ctr;
   reg [1:0] booth_code;
   
   always @(posedge clk or posedge reset) begin
      if (reset) 
      begin
         rdy     <= 0;
         p       <= 0;
         ctr     <= 0;
         multiplier <= {8'b0, a};
         multiplicand <= {8'b0, b};
         booth_code <= 2'b00;
      end 
      else 
      begin 
         if(ctr < 16) 
         begin
            booth_code <= {multiplier[0], booth_code[1]};
			case(booth_code)
				2'b01: p <= p + multiplicand;
				2'b10: p <= p - multiplicand;
				default: p <= p;
			endcase
			p <= p >> 1;
			multiplier <= multiplier >> 1;
			multiplicand <= multiplicand << 1;
			ctr <= ctr + 1;
         end
         else 
         begin
            rdy <= 1;
         end
      end
   end 
endmodule
```
In the original code, the process of Booth encoding was not properly implemented. It was checking only the multiplier[0] and multiplier[1] which is not correct for Booth algorithm. Also, the multiplicand was not left shifted which is a part of Booth algorithm. 

In the corrected code, a 2-bit register 'booth_code' is added. On each clock cycle, the LSB of the multiplier and the previous LSB (stored in booth_code[1]) form the Booth code. Depending on the value of the Booth code, the product 'p' is updated. After that, the product and the multiplier are right shifted while the multiplicand is left shifted.
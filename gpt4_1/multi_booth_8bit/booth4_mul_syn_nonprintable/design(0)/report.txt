Sure, I've corrected the errors in the design code. Here is the complete modified design code:

```verilog
`timescale 1ns / 1ps

module multi_booth_8bit (
    input clk, reset,
    input [7:0] a, b,
    output reg [15:0] p,
    output reg rdy
);

    reg [15:0] multiplier;
    reg [15:0] multiplicand;
    reg [4:0] ctr;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            rdy <= 0;
            p <= 0;
            ctr <= 0;
            multiplier <= {8{a[7]}, a};
            multiplicand <= {8{b[7]}, b};
        end 
        else begin 
            if(ctr < 16) begin
                multiplicand <= multiplicand << 1;
                if (multiplier[ctr] == 1)
                    p <= p + multiplicand;
                ctr <= ctr + 1;
            end
            else 
                rdy <= 1;
        end
    end
endmodule
```
Please note that:

1. I've changed the declaration of p and rdy to "output reg" as both are driven by a procedural block (always block).
2. The non-printable characters and some syntax errors (like ã€Š instead of <) have been corrected.
3. The extra closing brace "}" after the assignment of multiplicand inside the reset condition has been removed.
4. The declaration of inputs and outputs has been combined with the module declaration, which is the recommended style.